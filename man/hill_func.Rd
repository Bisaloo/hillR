% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hill_func.R
\name{hill_func}
\alias{hill_func}
\title{Functional diversity through Hill Numbers}
\usage{
hill_func(comm, traits, traits_as_is = FALSE, q = 0, base = exp(1),
  checkdata = TRUE, div_by_sp = FALSE, ord = c("podani", "metric"),
  fdis = TRUE, stand_dij = FALSE)
}
\arguments{
\item{comm}{data frame of vegtation data. Sites as rows, species as columns.}

\item{traits}{data frame of species functional traits data. Species as rows, traits as columns.
It can include both continuous and categorical data. It will be transformed into a distance
matrix using `FD::gowdis(traits)`. If all traits are numeric, then it will use Euclidean distance.}

\item{traits_as_is}{if FALSE (default) traits data frame will be transformed into a distance matrix}

\item{q}{hill number, q (default is 0) to control weights of species abundance.}

\item{base}{default is exp(1), the base of log.}

\item{checkdata}{whether to check data first? Default is TRUE.}

\item{div_by_sp}{as FD calculated in this way will be highly correlated with taxonomic diversity,
one simple way to correct this is to divide the results by the number of species. Default is FALSE.}

\item{ord}{ord in FD::gowdis.}

\item{fdis}{whether to calculated FDis, default is TRUE.}

\item{stand_dij}{whether to standardize distance matrix to have max value of 1? Default is FALSE.}
}
\value{
a matrix, with these information for each site: Q (Rao's Q); D_q (functional hill number,
 the effective number of equally abundant and functionally equally distince species);
 MD_q (mean functional diversity per species, the effective sum of pairwise distances between
 a fixed species and all other species); FD_q (total functional diversity, the effective total functional
 distance between species of the assemblage). See Chiu and Chao 2014 page 4 for more information.
}
\description{
Calculate functional diversity for each site (alpha diversity).
}
\examples{
dummy = FD::dummy
hill_func(comm = dummy$abun, traits = dummy$trait, q = 0)
hill_func(comm = dummy$abun, traits = dummy$trait, q = 1)
hill_func(comm = dummy$abun, traits = dummy$trait, q = 0.9999)
hill_func(comm = dummy$abun, traits = dummy$trait, q = 2)
hill_func(comm = dummy$abun, traits = dummy$trait, q = 3)

}
